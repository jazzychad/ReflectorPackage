
// THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT

// gyb /path/to/Sources/Extractors.swift.gyb -o path/to/Sources/Reflector/Extractors.swift

import Foundation
import Combine
import SwiftUI

// MARK: - ReflectionValueExtractor

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  THIS CODE IS AUTOMATICALLY GENERATED - DO NOT EDIT!! *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

public protocol ReflectionValueExtractor {
    func extractWrappedValue() -> Any
    func wrapperTypeString() -> String
}

%{
    extractor_types = [
        ('Published', ''),
        ('State', ''),
        ('Binding', ''),
        ('AppStorage', ''),
        ('ObservedObject', 'ObservableObject'),
        ('EnvironmentObject', 'ObservableObject'),
        ('StateObject', 'ObservableObject'),
    ]
}%

% for tup in extractor_types:
%{
TypeName = tup[0]
ExtraProtocol = tup[1]
}%

// MARK: - ${TypeName}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  THIS CODE IS AUTOMATICALLY GENERATED - DO NOT EDIT!! *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

public protocol ${TypeName}Reflection: ReflectionValueExtractor {}
extension ${TypeName}: ${TypeName}Reflection {
    public func extractWrappedValue() -> Any {
        return ${TypeName}Extractor.extractWrappedValue(self)
    }

    public func wrapperTypeString() -> String {
        return "${TypeName}"
    }
}

final class ${TypeName}Extractor<T${': ' + ExtraProtocol if len(ExtraProtocol) > 0 else ''}> {
    @${TypeName} var value: T

    static func extractWrappedValue(_ wrapper: ${TypeName}<T>) -> T {
        return Self(wrapper).value
    }

    init(_ wrapper: ${TypeName}<T>) {
        _value = wrapper
    }
}

% end



